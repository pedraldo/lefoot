// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  firstname     String
  lastname      String
  username      String
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  teams         UsersOnTeams[]
}

model Team {
  id             String         @id @default(cuid())
  fixture_team_A Fixture?       @relation("team_A_fixture")
  fixture_team_B Fixture?       @relation("team_B_fixture")
  users          UsersOnTeams[]
}

model UsersOnTeams {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@id([userId, teamId])
}

model Fixture {
  id           String   @id @default(cuid())
  date_time    DateTime
  team_A_score Int
  team_B_score Int
  team_A_id    String   @unique
  team_B_id    String   @unique

  team_A Team @relation("team_A_fixture", fields: [team_A_id], references: [id])
  team_B Team @relation("team_B_fixture", fields: [team_B_id], references: [id])
}
