// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(cuid())
  firstname       String
  lastname        String
  username        String
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole  @default(USER)
  accounts        Account[]
  teams           Team[]
  squads          Squad[]   @relation("UserSquad")
  guestSquads     Squad[]   @relation("UserGuestSquad")
  createdSquads   Squad[]   @relation("SquadCreator")
  targetedSquadId String?
  targetedSquad   Squad?    @relation("UserTargetSquad", fields: [targetedSquadId], references: [id], onDelete: SetNull)
}

model Team {
  id           String   @id @default(cuid())
  creationDate DateTime
  users        User[]

  squadId String
  squad   Squad  @relation(fields: [squadId], references: [id], onDelete: Cascade)

  // fixture   Fixture? @relation(fields: [fixtureId], references: [id])
  // fixtureId String?

  homeFixtures Fixture[] @relation("HomeTeamFixture")
  awayFixtures Fixture[] @relation("AwayTeamFixutre")
}

model Fixture {
  id         String   @id @default(cuid())
  datetime   DateTime
  homeScore  Int
  awayScore  Int
  homeTeamId String   @unique
  awayTeamId String   @unique

  homeTeam Team @relation("HomeTeamFixture", fields: [homeTeamId], references: [id], onDelete: SetDefault)
  awayTeam Team @relation("AwayTeamFixutre", fields: [awayTeamId], references: [id], onDelete: SetDefault)

  squadId String
  squad   Squad  @relation(fields: [squadId], references: [id], onDelete: Cascade)

  // Team Team[]
}

model Squad {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime
  users         User[]    @relation("UserSquad")
  targeterUsers User[]    @relation("UserTargetSquad")
  guestUsers    User[]    @relation("UserGuestSquad")
  fixtures      Fixture[]
  teams         Team[]

  creatorId String
  creator   User   @relation("SquadCreator", fields: [creatorId], references: [id], onDelete: SetDefault)
}
